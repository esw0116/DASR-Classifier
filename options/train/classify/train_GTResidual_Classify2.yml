name: train_GTResidual_Classifier_Norm
model_type: DASRGTResidualClassifierModel
# model_type: DASRClassifierModel
scale: 4
num_gpu: 1
num_networks: 5
manual_seed: 0

l1_gt_usm: True
percep_gt_usm: True
gan_gt_usm: False

degree_list: ['standard_degrade_one_stage']
degree_prob: [1]

# the degradation process of weak_degrade_one_stage
# resize_prob_weak1: [0.1, 0.2, 0.7]  # up, down, keep
# resize_range_weak1: [0.85, 1.2]
# gaussian_noise_prob_weak1: 0.5
# noise_range_weak1: [1, 10]
# poisson_scale_range_weak1: [0.05, 0.5]
# gray_noise_prob_weak1: 0.4
# jpeg_range_weak1: [90, 95]

# the degradation process of standard_degrade_one_stage
resize_prob_standard1: [0, 0, 1]  # up, down, keep
resize_range_standard1: [0.5, 1.2]
gaussian_noise_prob_standard1: 1
noise_range_standard1: [1, 20]
poisson_scale_range_standard1: [0.05, 1.5]
gray_noise_prob_standard1: 0
jpeg_range_standard1: [50, 95]

# the first degradation process of severe_degrade_two_stage
# resize_prob: [0.2, 0.7, 0.1]  # up, down, keep
# resize_range: [0.15, 1.5]
# gaussian_noise_prob: 0.5
# noise_range: [1, 30]
# poisson_scale_range: [0.05, 3]
# gray_noise_prob: 0.4
# jpeg_range: [30, 95]

# the second degradation process of severe_degrade_two_stage
# second_blur_prob: 0.8
# resize_prob2: [0.3, 0.4, 0.3]  # up, down, keep
# resize_range2: [0.3, 1.2]
# gaussian_noise_prob2: 0.5
# noise_range2: [1, 25]
# poisson_scale_range2: [0.05, 2.5]
# gray_noise_prob2: 0.4
# jpeg_range2: [30, 95]

gt_size: 256
queue_size: 192

# dataset and data loader settings
datasets:
  train:
    name: DIV2K
    type: DAClassifierDataset
    dataroot_gt: dataset/DIV2K/DIV2K_train_HR
    meta_info: basicsr/data/meta_info/meta_info_DIV2K800_GT.txt
    io_backend:
      type: disk

    # blur_kernel_size_weak1: 21
    # blur_kernel_size_minimum_weak1: 7
    # kernel_list_weak1: [ 'iso', 'aniso' ]
    # kernel_prob_weak1: [ 0.65, 0.35 ]
    # sinc_prob_weak1: 0
    # blur_sigma_weak1: [ 0.2, 0.8 ]
    # betag_range_weak1: [ 0.5, 4 ]
    # betap_range_weak1: [ 1, 2 ]

    blur_kernel_size_standard1: 21
    blur_kernel_size_minimum_standard1: 7
    kernel_list_standard1: [ 'iso' ]
    kernel_prob_standard1: [ 1 ]
    sinc_prob_standard1: 0
    blur_sigma_standard1: [ 0.2, 1.5 ]
    betag_range_standard1: [ 0.5, 4 ]
    betap_range_standard1: [ 1, 2 ]

    # blur_kernel_size: 21
    # blur_kernel_size_minimum: 7
    # kernel_list: [ 'iso', 'aniso']
    # kernel_prob: [ 0.65, 0.35]
    # sinc_prob: 0
    # blur_sigma: [0.2, 3]
    # betag_range: [0.5, 4]
    # betap_range: [1, 2]

    # blur_kernel_size2: 21
    # blur_kernel_size2_minimum: 7
    # kernel_list2: [ 'iso', 'aniso' ]
    # kernel_prob2: [ 0.65, 0.35 ]
    # sinc_prob2: 0
    # blur_sigma2: [0.2, 1.5]
    # betag_range2: [0.5, 4]
    # betap_range2: [1, 2]

    # final_sinc_prob: 0.8

    gt_size: 256
    use_hflip: True
    use_rot: False

    # data loader
    use_shuffle: true
    num_worker_per_gpu: 1
    batch_size_per_gpu: 32
    dataset_enlarge_ratio: 1
    prefetch_mode: ~

  val:
    name: DIV2K_type00_GTDegradation
    type: PairedImageDegDataset
    dataroot_lq: dataset/RealSR_TEST/Urban100_Real_type00
    dataroot_deg: dataset/RealSR_TEST/Urban100_Real_type00_tensors
    dataroot_gt: dataset/benchmark/Urban100/HR
    io_backend:
      type: disk

    batch_size_per_gpu: 1
  

# network structures
network_c:
  type: VGG  # Degradation_Classifier
  # in_nc: 3
  # nf: 128

# path
path:
  param_key_g: ~
  strict_load_g: true

# training settings
train:
  # ema_decay: 0.999
  optim_g:
    type: Adam
    lr: !!float 1e-3
    weight_decay: 0
    betas: [ 0.9, 0.99 ]

  scheduler:
    type: MultiStepLR
    milestones: [ 7500 ]
    gamma: 1

  total_iter: 10000
  warmup_iter: -1  # no warm up

  # losses
  classify_opt:
    type: CrossEntropyLoss
    loss_weight: 1.0
    reduction: mean

  net_d_iters: 1
  net_d_init_iters: 0

# Uncomment these for validation
# validation settings
val:
  val_freq: !!float 50
  save_img: True

# logging settings
logger:
  print_freq: 25
  save_checkpoint_freq: !!float 2e3
  use_tb_logger: true
  wandb:
    project: ~
    resume_id: ~

# dist training settings
dist_params:
  backend: nccl
  port: 29500

#PYTHONPATH="./:${PYTHONPATH}" CUDA_VISIBLE_DEVICES=12,13,14,15 python -m torch.distributed.launch --nproc_per_node=4 --master_port=4335 dasr/train.py -opt options/train/DASR/train_DASR.yml --launcher pytorch --auto_resume
#PYTHONPATH="./:${PYTHONPATH}" CUDA_VISIBLE_DEVICES=15 python dasr/train.py -opt options/train/DASR/train_DASR.yml
